---
title: "RMN Plant Monitoring Summary"
output:
  word_document: default
  html_document: default
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
```
Grazing can change plant community structure and composition by removing and trampling aboveground biomass and changing photosynthetic capacity, growth rates, and competitive dynamics of plants. Grazing that is meant to benefit vegetation communities in California is often focused on reducing thatch, slowing or reversing successional trajectories, and increasing species and functional diversity, such as perennial grasses. Managers typically control the timing and intensity of grazing to achieve these goals. 


```{r echo = FALSE, message = FALSE, warning = FALSE}

library(reshape2)
library(ggplot2)
library(knitr)
library(plyr)

# Set your working directory. This is the pathway to the file where you keep your downloaded data. 
# All products get written to this as well.
# I recommend 1 folder per ranch
# Replace the filepath in quotes with your filepath
# Remember to change the backslashes ("\") to forward slashes ("/")


# Read in Veg data
# Replace the filename in quotes with whatever you named the file 

main<-read.csv("GlennMain2018.csv")
lpi<-read.csv("GlennLPI2018.csv")
checklist<-read.csv("GlennChecklist2018.csv")

# Read in the California Plants list and Invasivs.  
##These are files you should have gotten from Libby. 
##Bug her if you didn't


CAPlants<-read.csv("CAPlantsv2.csv")
Invasives<-read.csv("Invasivesv1.csv")

##data cleanup to get ready##
main$Date = as.Date(as.character(main$Date), "%m/%d/%Y")
lpi$Date = as.Date(as.character(lpi$Date), "%m/%d/%Y")
checklist$Event.Date = as.Date(as.character(checklist$Event.Date), "%m/%d/%Y")

### Point year

main$year = format(as.Date(main$Date), "%Y")
main$pointyear = paste(main$PointId, "-", main$year)
lpi$year = format(as.Date(lpi$Date), "%Y")
lpi$pointyear = paste(lpi$Point.Id, "-", lpi$year)
checklist$year = format(as.Date(checklist$Event.Date), "%Y")
checklist$pointyear = paste(checklist$Point.Id, "-", checklist$year)


#####Lets just do 2018 here
# main = main[main$Date > as.Date("2018-01-01"),]
# lpi = lpi[lpi$Date > as.Date("2018-01-01"),]
# checklist = checklist[checklist$Event.Date > as.Date("2018-01-01"),]

##remove blank rows
lpi = subset(lpi, subset = Soil.Surface != "")

#################################################################
##		Part 1: Summary of cover table  	#########
#################################################################

# Aggreate cover of trees and shrubs
covsum<- ddply(checklist, .(Vegetation.Type, pointyear), summarise, Percent.Cover=sum(Percent.Cover), .drop=F)
shrubs<-subset(covsum, subset=covsum$Vegetation.Type == "shrubs")
trees<-subset(covsum, subset=covsum$Vegetation.Type == "trees")


###### Calculate bare ground, thatch & litter ###############

lpi$BG<-0
lpi$BG <- replace(lpi$BG, lpi$Top.Layer == "NOPLANT" & lpi$Lower1 == "" & lpi$Lower2 == "" & lpi$Lower3 == "" & lpi$Soil.Surface == "S", 1)

#Aggregate Bare Grounds By Point
BareGround<-aggregate(lpi$BG,list(lpi$pointyear),sum)
names(BareGround)<-c("pointyear", "BareGround")


#Calculate Litter
#First, rename all of the things that could be litter into just one term
lpi$Litter<-0
lpi$Litter <- replace(lpi$Litter, lpi$Lower1 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Lower2 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Lower3 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Lower4 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Lower5 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Lower6 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Lower7 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Lower8 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Lower9 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Lower10 == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Soil.Surface == "L", 1)
lpi$Litter <- replace(lpi$Litter, lpi$Soil.Surface == "EM", 1)

Litter<-aggregate(lpi$Litter,list(lpi$pointyear),sum)
names(Litter)<-c("pointyear", "Litter")

lpi$Thatch<-1
lpi$Thatch<-replace(lpi$Thatch, is.na(lpi$Thatch.Indices.Lower), 0)
lpi$Thatch<-replace(lpi$Thatch, lpi$Thatch.Indices.Lower == "", 0)
lpi$Thatch<-replace(lpi$Thatch, is.na(lpi$Thatch.Top.Layer), 0)
lpi$Thatch<-replace(lpi$Thatch, lpi$Thatch.Top.Layer == "", 0)

Thatch<-aggregate(lpi$Thatch,list(lpi$pointyear),sum, na.rm = TRUE)
names(Thatch)<-c("pointyear", "Thatch")


###########		Species Richness	##########################

lpi$Point.Dir<-paste(lpi$pointyear, lpi$Direction, sep="-")

layers<-subset(lpi, select=c("pointyear",  "Top.Layer", "Lower1", "Lower2", "Lower3", "Lower4", "Lower5", "Lower6", "Lower7"))

longlpi<-melt(layers, id="pointyear")
names(longlpi)<-c("pointyear", "Layer", "Spp")
checklist$Layer<-"extras"
extras<-subset(checklist, select=c("pointyear", "Layer", "USDA.Code"))
names(extras)<-c("pointyear", "Layer", "Spp")

both<-rbind(longlpi, extras)
both$Spp<-as.factor(both$Spp)

#Remove the non-spp
Exclude<-c("", "2FA", "2FORB", "2FP", "2GA", "2GP", "2LICHN", 
"2LTR", "2LTRWS",  "2PLANT",  "2W", "NOPLANT", "L", "WL")
both <- both[!(both$Spp %in% Exclude),]
both<-droplevels(both)


##add plants that are in the soil surface hit to this that## 

richness<-NULL

both1 = both
both1$Layer = NULL
both1 = both1[!duplicated(both1),]
richness = both1
# for (i in levels(both$pointyear)) {
# 	Point<-both[both$pointyear==i,]
# 	Point<-subset(Point, !duplicated(Point$Spp))
# if (is.null(richness)) {richness<-Point} else {richness<-rbind(richness,Point)}}




richness<-merge(richness, CAPlants, by.x = "Spp", by.y = "Accepted.Symbol", all.x = TRUE, all.y = FALSE)

richness2<-aggregate(richness$Spp, list(richness$pointyear), length)
names(richness2)<-c("pointyear", "NumSpp")


#### Now bring everything together

Pointyears = subset(main, select = c(pointyear, PointId, year))

data.summary<-merge(richness2, Litter, by="pointyear")
data.summary<-merge(data.summary, Thatch,by="pointyear")
data.summary<-merge(data.summary, BareGround,by="pointyear")
data.summary<-merge(data.summary, trees,by="pointyear", all.x=TRUE)
data.summary<-merge(data.summary, shrubs,by="pointyear", all.x=TRUE)
data.summary = merge(data.summary, Pointyears, by  = "pointyear")


# IF you have transect where Not every point has all 100 subsamples, 
# Then run this to correct for reduced effort

lpi$Tally<-1
indices<-aggregate(lpi$Tally, list(lpi$pointyear), sum)
names(indices)<-c("pointyear", "NumIndices")

data.summary<-merge(data.summary, indices, by="pointyear")
data.summary$Litter<-(data.summary$Litter/data.summary$NumIndices)*100
data.summary$BareGround<-(data.summary$BareGround/data.summary$NumIndices)*100
data.summary$Thatch = (data.summary$Thatch/data.summary$NumIndices)*100
## Write Summary table to a .csv
write.csv(data.summary, "CoverSummaryTable.csv")

# or to select and write by hand
#write.csv(data.summary, file.choose())

```

This is total number of grasses and forbs observed at each point in each year



```{r echo = FALSE}
# 
richness_plot = ggplot(data.summary, aes(x = PointId, y = NumSpp)) 

rp = richness_plot + geom_bar(stat = "identity",position = position_dodge(), color = "black") +
  scale_fill_manual(values=c("#999999", "#E69F00")) + xlab("Point ID") + ylab("Number of Species") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
rp


#ggsave("richness.pdf", rp)
```

This is total percent thatch at each point 



```{r echo = FALSE, message = FALSE, warning = FALSE}

thatch_plot = ggplot(data.summary, aes(x = PointId, y = Thatch/NumIndices)) 

tp = thatch_plot + geom_bar(stat = "identity", position = position_dodge(), color = "black") +
  scale_fill_manual(values=c("#999999", "#E69F00")) + xlab("Point ID") + ylab("Percent Thatch") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
tp

```

This is percentage of litter cover at each point 



```{r echo = FALSE, message = FALSE, warning = FALSE}

litter_plot = ggplot(data.summary, aes(x = PointId, y = Litter)) 

lp = litter_plot + geom_bar(stat = "identity",position = position_dodge(), color = "black") +
  scale_fill_manual(values=c("#999999", "#E69F00")) + xlab("Point ID") + ylab("Percent Litter") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
lp

```

This is percentage of bare ground at each point 



```{r echo = FALSE, message = FALSE, warning = FALSE}

bg_plot = ggplot(data.summary, aes(x = PointId, y = BareGround)) 

bg = bg_plot + geom_bar(stat = "identity",position = position_dodge(), color = "black") +
  #scale_fill_manual(values=c("#999999", "#E69F00")) + 
  xlab("Point ID") + ylab("Percent Bare Ground") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
bg


```

```{r echo = FALSE, message = FALSE, warning = FALSE}
################################################################				
########	  Part 2:  Making the Species List	 #######
################################################################

SppList<-subset(richness, select=c("Spp", "Symbol", "Scientific.Name", "Common.Name","Genus","Family","Family.Common.Name",
"Duration","Growth.Habit", "Native.Status" ,"Invasive", "FunGrp"))
    
SppList<-subset(SppList, !duplicated(SppList$Spp))



##########################################################################################################
#####
## Make a cover table with Invasives
#####



CAPlantsI<-CAPlants
levels(CAPlantsI$FunGrp) <- c(levels(CAPlantsI$FunGrp), "Invasives")

CAPlantsI$FunGrp[CAPlantsI$Accepted.Symbol %in% Invasives$USDA.code]<-"Invasives"

#########################################################
######

SppList$Native.Status<-substr(SppList$Native.Status, 1, 7)

##### Make a Native/Invasive category
SppList$Provenance<-NULL
SppList$Provenance <- replace(SppList$Provenance, SppList$Native.Status == "L48 (N)", "Native")
SppList$Provenance <- replace(SppList$Provenance, SppList$Native.Status == "L48 (I)", "Non-native")


## Write species list to a .csv
write.csv(SppList, "PlantSpeciesList.csv")

SppList2<-subset(SppList, select=c("Scientific.Name", "Common.Name", "Family", "Provenance", "FunGrp"))

#Or to select by hand
#write.csv(SppList, file.choose())

kable(SppList2)

###########################################################################
#######       Part 3: % cover of herbaceous species    ####################
###########################################################################

## This creates a table with SPP Id across the top and proportion of cover in the cells, by point

## Step 1. In a separate table, calculate the total number of Point.Index 
## per point

lpi$Tally<-1

a<-aggregate(lpi$Tally, list(lpi$pointyear), sum)
names(a)<-c("pointyear", "NumIndices")


## Step 2: limit fields to point.id, and all of the layers.
## reshape so you have a point field and then all of the plants

lpi.trim<-subset(lpi, select=c("pointyear", "year", "Point.Id", "Canopy1", "Canopy2", "Canopy3", "Top.Layer","Lower1","Lower2", "Lower3", "Lower4","Lower5","Lower6","Lower7", "Lower8","Lower9","Lower10","Soil.Surface"))

longlpi<-melt(lpi.trim, id=c("pointyear", "Point.Id", "year"))
# Note, this step may give a warning, but it's 
names(longlpi)<-c("pointyear", "Point.Id", "year", "Layer", "Spp")

longlpi<-subset(longlpi, select=c("pointyear", "Point.Id", "year", "Spp"))
longlpi$Tally<-1

newlpi<-dcast(longlpi, pointyear~Spp,value.var=c("Tally"), sum)
newlpi<-merge(newlpi, a, by="pointyear")
pointyear<-newlpi$pointyear
newlpi.relative<-(newlpi[,3:ncol(newlpi)-1]/newlpi$NumIndices) *100
newlpi.relative<-cbind(pointyear, newlpi.relative)

## Almost there, just some tidying

drops<-c("Var.2", "2FA", "2FORB", "2FP", "2FS", "2GA", "2GP", "2LICHN", "2LTR", "2LTRWS", "2MOSS", "2PLANT", 
"2W", "NA", "NumIndices", "NOPLANT", "UNKNWN", "M", "L", "EM", "AM", "R", "WL", "S")
newlpi.relative <- newlpi.relative[,!(names(newlpi.relative) %in% drops)]
newlpi <- newlpi[,!(names(newlpi) %in% drops)]


### Write the table to a .csv  
write.csv(newlpi.relative, "LPIsummary.csv")

# or to write by hand
#write.csv(newlpi.relative, file.choose())


#############################################################################################################
#########  Part 4, Version 1: Make the same table as in part 3, but functional groups instead of species. Invasive not a Functional Group##### 
#############################################################################################################

longlpi1 = longlpi

# replace list in Longlpi with functional groups
longlpi$FunGrp<-NULL
longlpi$FunGrp<-CAPlants$FunGrp[match(longlpi$Spp,CAPlants$Accepted.Symbol)]
Fun.Sum<-aggregate(longlpi$Tally, list(longlpi$pointyear, longlpi$FunGrp), sum)
names(Fun.Sum)<-c("pointyear", "FunGrp", "Count")

Fun.Sum2<-dcast(Fun.Sum, pointyear~FunGrp,value.var=c("Count"), sum)
Fun.Sum2<-merge(Fun.Sum2, a, by="pointyear")
pointyear<-Fun.Sum2$pointyear

Fun.Sum3 = Fun.Sum2
Fun.Sum3[,2:(ncol(Fun.Sum3) - 1)] = Fun.Sum3[,2:(ncol(Fun.Sum3) - 1)]/Fun.Sum3[,ncol(Fun.Sum3)]
Fun.Sum3 = merge(Fun.Sum3, Pointyears, by = "pointyear")


Fun.Sum2.relative<-(Fun.Sum2[,2:ncol(Fun.Sum2)]/Fun.Sum2$NumIndices) *100
Fun.Sum2.relative<-cbind(pointyear, Fun.Sum2.relative)
Fun.Sum2.relative$TotalCover<-rowSums(Fun.Sum2.relative[,2:(ncol(Fun.Sum2.relative)-1)], na.rm=TRUE)

Fun.Sum2.relative[,2:(ncol(Fun.Sum2.relative)-1)]<-Fun.Sum2.relative[,2:(ncol(Fun.Sum2)-1)]/Fun.Sum2.relative$TotalCover    

Fun.Sum2.relative = merge(Fun.Sum2.relative, Pointyears, by = "pointyear")




#########  Part 4, Version 2: Make the same table as in part 3, but functional groups instead of species. Invasive as a fun grp  ##############
#############################################################################################################


# replace list in Longlpi with functional groups
longlpi2<-longlpi1
longlpi2$FunGrp<-NULL
longlpi2$FunGrp<-CAPlantsI$FunGrp[match(longlpi2$Spp,CAPlantsI$Accepted.Symbol)]
Fun.SumI<-aggregate(longlpi2$Tally, list(longlpi2$pointyear, longlpi2$FunGrp), sum)
names(Fun.SumI)<-c("pointyear", "FunGrp", "Count")

Fun.SumI2<-dcast(Fun.SumI, pointyear~FunGrp,value.var=c("Count"), sum)
Fun.SumI2<-merge(Fun.SumI2, a, by="pointyear")

pointyear<-Fun.SumI2$pointyear

Fun.SumI3 = Fun.SumI2
Fun.SumI3[,2:(ncol(Fun.SumI3) - 1)] = Fun.SumI3[,2:(ncol(Fun.SumI3) - 1)]/Fun.SumI3[,ncol(Fun.SumI3)]
Fun.SumI3 = merge(Fun.SumI3, Pointyears, by = "pointyear")

Fun.SumI2.relative<-(Fun.SumI2[,2:ncol(Fun.SumI2)]/Fun.SumI2$NumIndices) *100
Fun.SumI2.relative<-cbind(pointyear, Fun.SumI2.relative)
Fun.SumI2.relative$TotalCover<-rowSums(Fun.SumI2.relative[,2:(ncol(Fun.SumI2.relative)-1)], na.rm=TRUE)

Fun.SumI2.relative[,2:(ncol(Fun.SumI2.relative)-1)]<-Fun.SumI2.relative[,2:(ncol(Fun.SumI2)-1)]/Fun.SumI2.relative$TotalCover    

Fun.SumI2.relative = merge(Fun.SumI2.relative, Pointyears, by = "pointyear")





#################################################################################################################
##########  Part Awesome: Making Graphs		#################################################################
#################################################################################################################

```

This is a absolute cover summary figure without invasives as a functional group

```{r echo = FALSE, message = FALSE, warning = FALSE}

abs<- Fun.Sum3[,colnames(Fun.Sum3) != "NumIndices"]
abs<-melt(abs, id= c("pointyear", "PointId", "year"))
# Note, this step may give a warning, but it's okay
names(abs)<-c("pointyear", "Point.Id", "year", "Type", "Cover")

absolute = ggplot(abs, aes(x = pointyear, y = Cover, color = year))

absolute + geom_col(aes(fill = Type), position = position_stack(reverse = TRUE)) +
# coord_flip() +
 theme(legend.position = "top") + 
  theme(legend.text = element_text(size=8)) +
  theme(legend.title = element_blank()) +
  scale_fill_brewer(palette="Dark2") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#dev.print(pdf,"CommunityNoInvasive.pdf")  
```
Absolute cover with invasives as a functional group
```{r echo = FALSE, message = FALSE, warning = FALSE}

absI<- Fun.SumI3[,colnames(Fun.SumI3) != "NumIndices"]
absI<-melt(absI, id= c("pointyear", "PointId", "year"))
# Note, this step may give a warning, but it's okay
names(absI)<-c("pointyear", "Point.Id", "year", "Type", "Cover")

absoluteI = ggplot(absI, aes(x = pointyear, y = Cover, color = year))

absoluteI + geom_col(aes(fill = Type), position = position_stack(reverse = TRUE)) +
 #coord_flip() +
 theme(legend.position = "top") + 
  theme(legend.text = element_text(size=8)) +
  theme(legend.title = element_blank()) +
  scale_fill_brewer(palette="Dark2") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#dev.print(pdf,"CommunityNoInvasive.pdf")  
```


```{r echo = FALSE, message = FALSE, warning = FALSE}


p<-Fun.Sum2.relative[,colnames(Fun.Sum2.relative) != "NumIndices"]
p = p[, colnames(p) != "TotalCover"]
p<-melt(p, id=c("pointyear", "PointId", "year"))
# Note, this step may give a warning, but it's okay
names(p)<-c("pointyear", "Point.Id", "year", "Type", "Cover")


g = ggplot(p, aes(x = pointyear, y = Cover, color = year))

g + geom_col(aes(fill = Type), position = position_stack(reverse = TRUE)) +
 #coord_flip() +
 theme(legend.position = "top") + 
  theme(legend.text = element_text(size=8)) +
  theme(legend.title = element_blank()) +
  scale_fill_brewer(palette="Dark2") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#dev.print(pdf,"CommunityNoInvasive.pdf")  

```

This is a cover summary figure with invasives as a functional group



```{r echo = FALSE, message = FALSE, warning = FALSE}


###
pI<-Fun.SumI2.relative[,colnames(Fun.SumI2.relative) != "NumIndices"]
pI = pI[, colnames(pI) != "TotalCover"]
pI<-melt(pI, id=c("pointyear", "PointId", "year"))
# Note, this step may give a warning, but it's okay
names(pI)<-c("pointyear", "Point.Id", "year", "Type", "Cover")

g = ggplot(pI, aes(x = pointyear, y = Cover, color = year))

g + geom_col(aes(fill = Type), position = position_stack(reverse = TRUE)) +
 #coord_flip() +
 theme(legend.position = "top") + 
  theme(legend.text = element_text(size=8)) +
  theme(legend.title = element_blank()) +
  scale_fill_brewer(palette="Dark2") + theme(axis.text.x = element_text(angle = 90, hjust = 1))

### Write the table to a .csv  
write.csv(Fun.Sum2.relative, "LPIsummaryFun.csv")

# or to write by hand
#write.csv(Fun.Sum2.relative, file.choose())
### Write the table to a .csv  
write.csv(Fun.SumI2.relative, "LPIsummaryFun_wInvasive.csv")

dev.print(pdf,"CommunitywithInvasive.pdf")  




```

```{r echo = FALSE, message = FALSE, warning = FALSE}

se <- function(x) sqrt(var(x, na.rm = TRUE)/length(na.omit(x)))

d = abs
d$year = as.factor(d$year)
d$Type = as.factor(d$Type)

d2 = subset(d, subset = year == max(levels(year)))
d1 = subset(d, subset = year == min(levels(year)))

coveryear = merge(d1, d2, by = c("Point.Id", "Type"))
coveryear$change = coveryear$Cover.y - coveryear$Cover.x


x = aggregate(coveryear, by = list(coveryear$Type), FUN = "mean")
x = subset(x, select = c(Group.1, change))
y = aggregate(coveryear, by = list(coveryear$Type), FUN = "se")
y = subset(y, select = c(Group.1, change))
colnames(x) = c("Functional_Group", "Percent_Change")
colnames(y) = c("Functional_Group", "Standard_error")

x$Percent_Change = x$Percent_Change * 100
y$Standard_error = y$Standard_error * 100

coverchange = merge(x, y, by = "Functional_Group")

a = aggregate(coveryear, by = list(coveryear$Type), FUN = "mean")
a = subset(a, select = c("Group.1", "Cover.y"))
colnames(a) = c("Functional_Group", "Percent_Cover")
b = aggregate(coveryear, by = list(coveryear$Type), FUN = "se")
b = subset(b, select = c("Group.1", "Cover.y"))
colnames(b) = c("Functional_Group", "Standard_error")

current_cover = merge(a, b, by = "Functional_Group")

```
Here is a graph of absolute cover of functional groups

```{r, echo = FALSE}

cover_plot = ggplot(current_cover, aes(x = Functional_Group, y = Percent_Cover)) + 
  geom_col() + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(ymin = (current_cover$Percent_Cover - current_cover$Standard_error), ymax = (current_cover$Percent_Cover + current_cover$Standard_error), width = 0.5) + ylim(0, (max(current_cover$Percent_Cover) + max(current_cover$Standard_error)))

cover_plot

```


Here is a graph of change in functional groups

```{r echo = FALSE, message = FALSE, warning = FALSE}

c = ggplot(coverchange, aes(x = Functional_Group, y = Percent_Change)) + geom_col() + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(ymin = coverchange$Percent_Change - coverchange$Standard_error, ymax = coverchange$Percent_Change + coverchange$Standard_error, width = 0.5) + ylim((min(coverchange$Percent_Change) - max(coverchange$Standard_error)), (max(coverchange$Percent_Change) + max(coverchange$Standard_error)))
c


```





```{r echo = FALSE, message = FALSE, warning = FALSE}

ds = data.summary

ds$year = as.factor(ds$year)
ds$tree_cover = ds$Percent.Cover.x
ds$shrub_cover = ds$Percent.Cover.y


ds$Percent.Cover.x = NULL
ds$Percent.Cover.y = NULL
ds$NumIndices = NULL
ds$Vegetation.Type.x = NULL
ds$Vegetation.Type.y = NULL

ds<-melt(ds, id= c("pointyear", "PointId", "year"))

ds2 = subset(ds, subset = year == max(levels(year)))
ds1 = subset(ds, subset = year == min(levels(year)))

dsyear = merge(ds1, ds2, by = c("PointId", "variable"))
dsyear$change = dsyear$value.y - dsyear$value.x

dsmean = aggregate(dsyear, by = list(dsyear$variable), FUN = "mean", na.rm = TRUE)
dsmean = subset(dsmean, select = c(Group.1, value.y, change))
colnames(dsmean) = c("variable", "covermean", "changemean")
dsse = aggregate(dsyear, by = list(dsyear$variable), FUN = "se")
dsse = subset(dsse, select = c(Group.1, value.y, change))
colnames(dsse) = c("variable", "coverse", "changese")

all_ds = merge(dsmean, dsse, by = "variable")



# dstypes = melt(ds, by = "year")
# dstypes = subset(dstypes, select = c("PointId", "year", "variable", "value"))
# dsyear = aggregate(dstypes, by = list(dstypes$year, dstypes$variable), FUN = "mean")
# dsyear = subset(dsyear, select = c(Group.1, Group.2, value))
# colnames(dsyear) = c("year", "variable", "value")
# 
# dsyearse = aggregate(dstypes, by = list(dstypes$year, dstypes$variable), FUN = "se")
# dsyearse = subset(dsyearse, select = c(Group.1, Group.2, value))
# colnames(dsyearse) = c("year", "variable", "se")
# 
# # ds2 = subset(dsyear, subset = year == max(levels(year)))
# # ds1 = subset(dsyear, subset = year == min(levels(year)))
# # ds2se = subset(dsyearse, subset = year == max(levels(year)))
# # ds1se = subset(dsyearse, subset = year == min(levels(year)))
# 
# dsyear2 = merge(ds2, ds1, by = "variable")
# dsyear2$change = dsyear2$value.x - dsyear2$value.y
# 



```


Here is a summary of species richness, litter, thatch, bare ground, tree cover, and shrub cover. Tree cover and shrub cover come from the releve here.

```{r echo = FALSE, message = FALSE, warning = FALSE}

cp = ggplot(all_ds, aes(x = variable, y = covermean)) + geom_col() + theme_bw() + geom_errorbar(ymin = all_ds$covermean - all_ds$coverse, ymax = all_ds$covermean + all_ds$coverse, width = 0.5) + ylim((min(all_ds$covermean) - max(all_ds$coverse)), (max(all_ds$covermean) + max(all_ds$coverse)))
cp



```




```{r echo = FALSE, message = FALSE, warning = FALSE}

cp2 = ggplot(all_ds, aes(x = variable, y = changemean)) + geom_col() + theme_bw() + geom_errorbar(ymin = all_ds$changemean - all_ds$changese, ymax = all_ds$changemean + all_ds$changese, width = 0.5) + ylim((min(all_ds$changemean) - max(all_ds$changese)), (max(all_ds$changemean) + max(all_ds$changese)))
cp2



```












