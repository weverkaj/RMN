#' @title Make a soil texture triangle
#'
#' @description From output of prepare.soil.triangle() creates a soil texture plot and compares a ranch to other ranches in the dataset
#'
#' @param data dataframe, output of prepare.soil.triangle()
#' @param transect Character string of selected ranch code
#' @param labels = TRUE determines whether points from the chosen ranch are labeled on the plot
#' @param ... arguments supplied to TT.plot
#'
#' @return Soil classification triangle with chosen ranch points emboldened
#'
#' @examples texture.triangle.plot(soil, "ranchname")
#'
#'
#' @export texture_triangle_plot
#'
#' @return soil texture triangle
#'
#'
# Some useful keyboard shortcuts for package authoring:
#
#   Build and Reload Package:  'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'

texture.triangle.plot = function(data, transect, year, labels = TRUE, pch = 16,
                                 main = paste("Soil Texture - ",transect),
                                 cex.axis = 0.5,
                                 cex.lab = 0.75,
                                 cex.main = 0.75,
                                 text.tol = 0.2,
                                 tri.sum.tst = FALSE,
                                 cex = 0.75,
                                 frame.bg.col = "white",
                                 grid.show = FALSE){

  library(soiltexture)
  data = subset(data, YEAR == year)
  data = prepare.soil.triangle(data)

  data1 = subset(data, data$Transect == transect)
  data2 = subset(data, data$Transect != transect)

  if(isTRUE(labels)){
    l = data1$Point
  } else{l = NA}


  ##texture plot##

  test = TT.plot(
    class.sys = "USDA.TT",    ## with the UDSA texture classes
    tri.data = data2,
    pch = 16,
    main = main,
    cex.axis = cex.axis,
    cex.lab = cex.axis,
    cex.main = cex.main,
    text.tol = text.tol,
    tri.sum.tst = tri.sum.tst,
    col = "gray",
    cex = cex,
    frame.bg.col = frame.bg.col,
    grid.show = grid.show
  )

  TT.points(geo=test,
            tri.data = data1,
            pch = pch,
            tri.sum.tst=tri.sum.tst,
            col="black",
            cex=cex,
  )

  TT.text(
    tri.data = data1,
    geo = test,
    tri.sum.tst=tri.sum.tst,
    labels = l,
    pos=c(1,3,2),
    offset=0.2,
    font = 0.1,
    cex = cex,
    col= "black")
}
